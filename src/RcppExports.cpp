// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// normalizeIndices
IntegerMatrix normalizeIndices(const IntegerMatrix& mst);
RcppExport SEXP _clustertree_normalizeIndices(SEXP mstSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mst(mstSEXP);
    rcpp_result_gen = Rcpp::wrap(normalizeIndices(mst));
    return rcpp_result_gen;
END_RCPP
}
// mstToCC
IntegerVector mstToCC(const IntegerMatrix& mst, const NumericVector& dist);
RcppExport SEXP _clustertree_mstToCC(SEXP mstSEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mst(mstSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(mstToCC(mst, dist));
    return rcpp_result_gen;
END_RCPP
}
// mstToHclust
List mstToHclust(const IntegerMatrix& mst_, const NumericVector& dist);
RcppExport SEXP _clustertree_mstToHclust(SEXP mst_SEXP, SEXP distSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type mst_(mst_SEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type dist(distSEXP);
    rcpp_result_gen = Rcpp::wrap(mstToHclust(mst_, dist));
    return rcpp_result_gen;
END_RCPP
}
// chooseMetric_int
SEXP chooseMetric_int(std::string metric_name, List config);
RcppExport SEXP _clustertree_chooseMetric_int(SEXP metric_nameSEXP, SEXP configSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type metric_name(metric_nameSEXP);
    Rcpp::traits::input_parameter< List >::type config(configSEXP);
    rcpp_result_gen = Rcpp::wrap(chooseMetric_int(metric_name, config));
    return rcpp_result_gen;
END_RCPP
}
// primsRSL
NumericMatrix primsRSL(const NumericVector r, const NumericVector r_k, const int n, const double alpha, const int type);
RcppExport SEXP _clustertree_primsRSL(SEXP rSEXP, SEXP r_kSEXP, SEXP nSEXP, SEXP alphaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type r(rSEXP);
    Rcpp::traits::input_parameter< const NumericVector >::type r_k(r_kSEXP);
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(primsRSL(r, r_k, n, alpha, type));
    return rcpp_result_gen;
END_RCPP
}
// naive_clustertree
NumericMatrix naive_clustertree(const NumericVector& dist_x, const NumericVector& r_k, const int k, const double alpha, const int type);
RcppExport SEXP _clustertree_naive_clustertree(SEXP dist_xSEXP, SEXP r_kSEXP, SEXP kSEXP, SEXP alphaSEXP, SEXP typeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector& >::type dist_x(dist_xSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type r_k(r_kSEXP);
    Rcpp::traits::input_parameter< const int >::type k(kSEXP);
    Rcpp::traits::input_parameter< const double >::type alpha(alphaSEXP);
    Rcpp::traits::input_parameter< const int >::type type(typeSEXP);
    rcpp_result_gen = Rcpp::wrap(naive_clustertree(dist_x, r_k, k, alpha, type));
    return rcpp_result_gen;
END_RCPP
}
// kd_knn
List kd_knn(NumericMatrix query_x, SEXP tree_ptr, int k, bool priority);
RcppExport SEXP _clustertree_kd_knn(SEXP query_xSEXP, SEXP tree_ptrSEXP, SEXP kSEXP, SEXP prioritySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type query_x(query_xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type tree_ptr(tree_ptrSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< bool >::type priority(prioritySEXP);
    rcpp_result_gen = Rcpp::wrap(kd_knn(query_x, tree_ptr, k, priority));
    return rcpp_result_gen;
END_RCPP
}
// kdtree
List kdtree(NumericMatrix x, const int bkt_size);
RcppExport SEXP _clustertree_kdtree(SEXP xSEXP, SEXP bkt_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    Rcpp::traits::input_parameter< const int >::type bkt_size(bkt_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(kdtree(x, bkt_size));
    return rcpp_result_gen;
END_RCPP
}
// kNN_int
List kNN_int(const NumericMatrix& x, int k, int type, int bucketSize, int splitRule, double approx, NumericMatrix& r_x);
RcppExport SEXP _clustertree_kNN_int(SEXP xSEXP, SEXP kSEXP, SEXP typeSEXP, SEXP bucketSizeSEXP, SEXP splitRuleSEXP, SEXP approxSEXP, SEXP r_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericMatrix& >::type x(xSEXP);
    Rcpp::traits::input_parameter< int >::type k(kSEXP);
    Rcpp::traits::input_parameter< int >::type type(typeSEXP);
    Rcpp::traits::input_parameter< int >::type bucketSize(bucketSizeSEXP);
    Rcpp::traits::input_parameter< int >::type splitRule(splitRuleSEXP);
    Rcpp::traits::input_parameter< double >::type approx(approxSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type r_x(r_xSEXP);
    rcpp_result_gen = Rcpp::wrap(kNN_int(x, k, type, bucketSize, splitRule, approx, r_x));
    return rcpp_result_gen;
END_RCPP
}
// mergeHeight
NumericVector mergeHeight(List hcl);
RcppExport SEXP _clustertree_mergeHeight(SEXP hclSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hcl(hclSEXP);
    rcpp_result_gen = Rcpp::wrap(mergeHeight(hcl));
    return rcpp_result_gen;
END_RCPP
}
// kruskalsMST
NumericMatrix kruskalsMST(const NumericVector dist_x);
RcppExport SEXP _clustertree_kruskalsMST(SEXP dist_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type dist_x(dist_xSEXP);
    rcpp_result_gen = Rcpp::wrap(kruskalsMST(dist_x));
    return rcpp_result_gen;
END_RCPP
}
// primsMST
NumericMatrix primsMST(const NumericVector dist_x);
RcppExport SEXP _clustertree_primsMST(SEXP dist_xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const NumericVector >::type dist_x(dist_xSEXP);
    rcpp_result_gen = Rcpp::wrap(primsMST(dist_x));
    return rcpp_result_gen;
END_RCPP
}
// cut_simplified_hclust
IntegerVector cut_simplified_hclust(List hcl, IntegerVector cl_in, const int big_n);
RcppExport SEXP _clustertree_cut_simplified_hclust(SEXP hclSEXP, SEXP cl_inSEXP, SEXP big_nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hcl(hclSEXP);
    Rcpp::traits::input_parameter< IntegerVector >::type cl_in(cl_inSEXP);
    Rcpp::traits::input_parameter< const int >::type big_n(big_nSEXP);
    rcpp_result_gen = Rcpp::wrap(cut_simplified_hclust(hcl, cl_in, big_n));
    return rcpp_result_gen;
END_RCPP
}
// simplified_hclust
List simplified_hclust(List hcl, const int min_sz);
RcppExport SEXP _clustertree_simplified_hclust(SEXP hclSEXP, SEXP min_szSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type hcl(hclSEXP);
    Rcpp::traits::input_parameter< const int >::type min_sz(min_szSEXP);
    rcpp_result_gen = Rcpp::wrap(simplified_hclust(hcl, min_sz));
    return rcpp_result_gen;
END_RCPP
}
// vol_nSphere
double vol_nSphere(const int n, const double R);
RcppExport SEXP _clustertree_vol_nSphere(SEXP nSEXP, SEXP RSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const double >::type R(RSEXP);
    rcpp_result_gen = Rcpp::wrap(vol_nSphere(n, R));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_mod_simplehclust();

static const R_CallMethodDef CallEntries[] = {
    {"_clustertree_normalizeIndices", (DL_FUNC) &_clustertree_normalizeIndices, 1},
    {"_clustertree_mstToCC", (DL_FUNC) &_clustertree_mstToCC, 2},
    {"_clustertree_mstToHclust", (DL_FUNC) &_clustertree_mstToHclust, 2},
    {"_clustertree_chooseMetric_int", (DL_FUNC) &_clustertree_chooseMetric_int, 2},
    {"_clustertree_primsRSL", (DL_FUNC) &_clustertree_primsRSL, 5},
    {"_clustertree_naive_clustertree", (DL_FUNC) &_clustertree_naive_clustertree, 5},
    {"_clustertree_kd_knn", (DL_FUNC) &_clustertree_kd_knn, 4},
    {"_clustertree_kdtree", (DL_FUNC) &_clustertree_kdtree, 2},
    {"_clustertree_kNN_int", (DL_FUNC) &_clustertree_kNN_int, 7},
    {"_clustertree_mergeHeight", (DL_FUNC) &_clustertree_mergeHeight, 1},
    {"_clustertree_kruskalsMST", (DL_FUNC) &_clustertree_kruskalsMST, 1},
    {"_clustertree_primsMST", (DL_FUNC) &_clustertree_primsMST, 1},
    {"_clustertree_cut_simplified_hclust", (DL_FUNC) &_clustertree_cut_simplified_hclust, 3},
    {"_clustertree_simplified_hclust", (DL_FUNC) &_clustertree_simplified_hclust, 2},
    {"_clustertree_vol_nSphere", (DL_FUNC) &_clustertree_vol_nSphere, 2},
    {"_rcpp_module_boot_mod_simplehclust", (DL_FUNC) &_rcpp_module_boot_mod_simplehclust, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_clustertree(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
